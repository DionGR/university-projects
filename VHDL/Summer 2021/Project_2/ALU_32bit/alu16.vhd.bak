library ieee;
use ieee.std_logic_1164.all;

library work;
use work.ALU.all;
use work.ControlCircuit.all;
use work.basic_components.all;

entity ALU16 is
	port (a, b: in std_logic_vector (15 downto 0);
			operationCode: in std_logic_vector (2 downto 0);
			res: out std_logic_vector (15 downto 0);
			carryOut, isOverflow: out std_logic);
end entity;


architecture structural of ALU16 is	
	signal aInverted, bInverted: std_logic;
	signal operation: std_logic_vector(1 downto 0);
	signal c: std_logic_vector(16 downto 0);
begin
	Step0: controller port map (operationCode, aInverted, bInverted, operation, c(0));
	G0:
		for i in 0 to 15 generate
		alu: ALU1 port map (a(i), b(i), aInverted, bInverted, c(i), operation, res(i), c(i+1));
	end generate;
	
	checkOverflow: and_2 port map (c(14), c(15), isOVerflow);
	
	
	carryOut <= c(16) when operation = "10" else '0';

end architecture;