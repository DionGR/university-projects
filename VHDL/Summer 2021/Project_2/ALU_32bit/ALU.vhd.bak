library ieee;
use ieee.std_logic_1164.all;

package ALU is
	component ALU1
		port (a, b, aInvert, bInvert, cIn: in std_logic;
				s: in std_logic_vector(1 downto 0);
				f, cout: out std_logic);
	end component;
end package ALU;

library ieee;
use ieee.std_logic_1164.all;
library work;
use work.basic_components.all;
use work.inverter_mux2to1.all;
use work.fullAdd.all;
use work.mux4to1.all;

entity ALU1 is
	port (a, b, aInvert, bInvert, cIn: in std_logic;
			s: in std_logic_vector(1 downto 0);
			f, cOut: out std_logic);
end ALU1;

architecture structural of ALU1 is
	signal aInverted, bInverted, andRes, orRes, addRes, xorRes: std_logic;
begin
	Step0: mux2to1 port map (a, not a, aInvert, aInverted);
	Step1: mux2to1 port map (b, not b, bInvert, bInverted);
	Step2: and_2 port map (aInverted, bInverted, andRes);
	Step3: or_2 port map (aInverted, bInverted, orRes);
	Step4: fullAdder port map (cIn, aInverted, bInverted, addRes, cOut);
	Step5: xor_2 port map (aInverted, bInverted, xorRes);
	Step6: mux4to1Component port map (andRes, orRes, addRes, xorRes, s(1 downto 0), f);
end structural;