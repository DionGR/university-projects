// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2021 16:53:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Problem2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Problem2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg x1;
reg x2;
reg x3;
reg x4;
// wires                                               
wire f;

// assign statements (if any)                          
Problem2 i1 (
// port map - connection between master ports and signals/registers   
	.f(f),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4)
);
initial 
begin 
#160000 $finish;
end 

// x1
always
begin
	x1 = 1'b0;
	x1 = #80000 1'b1;
	#80000;
end 

// x2
always
begin
	x2 = 1'b0;
	x2 = #40000 1'b1;
	#40000;
end 

// x3
always
begin
	x3 = 1'b0;
	x3 = #20000 1'b1;
	#20000;
end 

// x4
always
begin
	x4 = 1'b0;
	x4 = #10000 1'b1;
	#10000;
end 
endmodule

